#!/bin/bash

#============================================================================
# Copyright 2009- ECMWF.
# This software is licensed under the terms of the Apache Licence version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.
#============================================================================

set -e
set -x #goes to stderr

echo " arguments=$*" >&2

#if [[ $# -ne 7 ]] ; then
#    echo "Error: wrong number of arguments = $# (must be 7)" >&2
#    if [[ $# -eq 0 ]] ; then
#        echo "This script should only be called from within ecflow_ui." >&2
#    fi
#    exit 1
#fi

mode=
sourceFile=
remoteUid=${USER}
remoteHost=
targetFile=
proxyJump=
byteMode=
byteValue=

while getopts m:s:u:h:t:j:b:v: flag
do
    case "${flag}" in
        m) mode=${OPTARG};;
        s) sourceFile=${OPTARG};;
        u) remoteUid=${OPTARG};;
        h) remoteHost=${OPTARG};;
        t) targetFile=${OPTARG};;
        j) proxyJump=${OPTARG};;
        b) byteMode=${OPTARG};;
        v) byteValue=${OPTARG};;
    esac
done

echo ""
echo "mode=$mode" >&2
echo "sourceFile=$sourceFile" >&2
echo "remoteUid=$remoteUid" >&2
echo "remoteHost=$remoteHost" >&2
echo "targetFile=$targetFile" >&2
echo "proxyJump=$proxyJump" >&2
echo "byteMode=$byteMode" >&2
echo "byteValue=$byteValue" >&2
echo "remoteUid=$remoteUid" >&2
echo ""

if [[ $mode != "file" && $mode != "dir" ]] ; then
    echo "Error: invalid mode! Has to be \"file\" or \"dir\"" >&2
    exit 1
fi

if [[ $sourceFile == "" ]] ; then
    echo "Error: sourceFile is empty!" >&2
    exit 1
fi

if [[ $remoteHost == "" ]] ; then
    echo "Error: remoteHost is empty!" >&2
    exit 1
fi

if [[ $targetFile == "" ]] ; then
    echo "Error: targetFile is empty!" >&2
    exit 1
fi

if [[ $proxyJump == "" ]] ; then
    echo "Error: proxyJump is empty!" >&2
    exit 1
elif [[ $proxyJump == "__NOJUMP__" ]] ; then
    proxyJump=""
else
    proxyJump="-J ${proxyJump}"
fi


if [[ $mode == "file" ]] ; then
    if [[ $byteMode != "all" && $byteMode != "pos" &&  $byteMode != "last" ]] ; then
        echo "Error: invalid byteMode value! Allowed values are: \"all\", \"pos\" and \"last\"" >&2
        exit 1
    fi

    if [[ $byteValue == "" ]] ; then
        echo "Error: byteValue is empty!" >&2
        exit 1
    fi

    if [[ $byteValue -lt 0 ]] ; then
        echo "Error: byteValue (=${byteValue}) must be >=0!" >&2
        exit 1
    fi
fi

if [[ $remoteUid == "" ]] ; then
    echo "Error: remoteUid is empty!" >&2
    exit 1
fi

if [[ $remoteUid == "__USER__" ]]  ; then
    remoteUid=${USER}
fi

# fetching a file
if [[ $mode == "file" ]] ; then
    # transfer the whole file
    if [[ $byteMode == "all" ]] ; then
        #script -q -c "scp ${host}:/${sourceFile} ${targetFile}"
        echo "scp ${proxyJump} ${remoteUid}@${remoteHost}:${sourceFile} ${targetFile}" >&2
        scp ${proxyJump} ${remoteUid}@${remoteHost}:${sourceFile} ${targetFile}

    # tranfers from a given byte offset
    elif  [[ $byteMode == "pos" ]] ; then
        cmd=$(cat <<-END
            tail -c +$((${byteValue}+1)) ${sourceFile}
END
)       
        echo "cmd="$cmd >&2
        ssh ${proxyJump}  ${remoteUid}@${remoteHost} -o StrictHostKeyChecking=no "${cmd}" > ${targetFile}
        st=$?
        echo "status="$st >&2

    #transfer the last bytes of the file
    else
        sourceSize=$(ssh ${remoteUid}@${remoteHost} -o StrictHostKeyChecking=no "wc -c < ${sourceFile}")

        if [[ ${sourceSize} -gt 0 && ${sourceSize} -le ${lastBytes} ]] ; then
            #script -q -c "scp ${host}:/${sourceFile} ${targetFile}"
            scp ${proxyJump} ${remoteHost}:/${sourceFile} ${targetFile}
        else
            ssh ${remoteUid}@${remoteHost} -o StrictHostKeyChecking=no "tail -c ${lastBytes} ${sourceFile}" > ${targetFile}
        fi
    fi
# fetching directory listing
else
    dirPath=$(dirname ${sourceFile})
    sourceName=$(basename ${sourceFile})
    echo "dirPath="$dirPath >&2
    echo "sourceName="$sourceName >&2
    pattern=$(echo $sourceName | cut -d '.' -f 1)".*"
   
    # the task here is to get the file modification date, file size in bytes
    # and file name for each file matching the pattern in the remote directory.
    # ls -l cannot be used here because apart from the parsing problems the 
    # modification date is not always complete (e.g. for dates older than 6 months).
    # Using stat is not an option either since it can have different options on
    # different unix systems
    cmd=$(cat <<-END
    cd ${dirPath}
    for f in \$(ls $pattern) ; do 
        if [[ ! -d "\$f" ]] ; then
            echo \$(date -r "\$f" +%s) \$( wc -c "\$f" | awk '{print \$1}' ) \$f
        fi
    done
END
)

    ssh ${proxyJump}  ${remoteUid}@${remoteHost} -o StrictHostKeyChecking=no "${cmd}" > ${targetFile}
fi
